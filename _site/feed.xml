<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KinLin&#39;s Blog</title>
    <description>I guess it comes down to a simple choice:get busy living or get busy dying.</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 30 Nov 2019 10:51:31 +0800</pubDate>
    <lastBuildDate>Sat, 30 Nov 2019 10:51:31 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>人人都能击败股神</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;2019年2月23日，“股神”巴菲特的伯克希尔·哈撒韦公司，发表的一年一度《致股东信》，信中披露：“1965-2018年，伯克希尔的复合年增长率为18.7％，明显超过标普500指数的9.7％。”
看到这个数字，每个人都得感慨股神毕竟是股神&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;但再仔细看下图，从绝对值来说，股神在最初的生涯里虽然已经很成功，但是越到后面增长越恐怖，时间的累积效应绝对是最重要的。这正应了他的自传《滚雪球》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;更让人感概的是他持有超过半个世纪的股票 可口可乐等，专注于做正确的事，并坚持下去，时间就是最好的朋友。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/text_img/warren-buffett-worth.png&quot; alt=&quot;warren worth&quot; /&gt;
&lt;img src=&quot;/img/text_img/warren-buffett-worth-by-year.png&quot; alt=&quot;warren worth year&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.twoeggz.com/news/14246697.html&quot;&gt;财富增长&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 12 May 2019 00:00:00 +0800</pubDate>
        <link>/2019/05/12/everyone_beat_warron/</link>
        <guid isPermaLink="true">/2019/05/12/everyone_beat_warron/</guid>
        
        
      </item>
    
      <item>
        <title>手机相机自动对焦(AF)</title>
        <description>&lt;h3 id=&quot;什么是自动对焦auto-focus&quot;&gt;什么是自动对焦(auto focus)&lt;/h3&gt;

&lt;p&gt;自动对焦是指手机中，利用sensor、控制软件和马达来实现改变成像距离，使sensor能获得清晰的照片的过程。在手机方案里，最重要的部分就是&lt;code class=&quot;highlighter-rouge&quot;&gt;自动&lt;/code&gt;。想象一下，小时候都玩过的用放大镜来聚焦阳光取火的游戏。在阳光下移动放大镜，使得聚焦的光点最小，几秒钟就能点燃一张纸巾，这里那个&lt;code class=&quot;highlighter-rouge&quot;&gt;最亮的光点&lt;/code&gt;就是焦点。&lt;/p&gt;

&lt;p&gt;同样，手机摄像头结构上也是有感光元件和镜头组成，通过镜头移动来改变焦点以获得最清晰的图片。&lt;/p&gt;

&lt;h3 id=&quot;来自生物学的礼物人类的眼睛是如何对焦的&quot;&gt;来自生物学的礼物：人类的眼睛是如何对焦的？&lt;/h3&gt;

&lt;p&gt;手机摄像头的发展，很大程度上在吸取人眼的功能。比如，当我们扭头看向不同的物体时，对焦就已经完成，甚至不需要刻意去做什么； 能够适应不同的光照条件，当从正常光照条件下走向一间漆黑一片的房间后，经过很短时间的调节就能借助极其微弱的光照条件看清楚物体，倘若这时候拿出一部手机，很大可能获得的是黑乎乎一片加大片的噪点。 而且我们的眼睛天生就有防抖功能，比如我们在一个轻微抖动的车上，依然能看清车外的美景，但是如果相机没有防抖功能，那很大可能是无法完成对焦的。&lt;/p&gt;

&lt;p&gt;那人眼的机构是什么样的呢？
&lt;img src=&quot;/img/text_img/human_eye_anatomy.jpg&quot; alt=&quot;human_eye&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;人眼的组成部分有：
Optical Nerve: 视觉神经
Retina: 视网膜
Lens: 晶状体
Conenea: 
Cilliary Muscle: 睫状肌
Pupil: 瞳孔
Iris: 虹膜&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;摄像头的结构：
&lt;img src=&quot;/img/text_img/phone-camera.jpg&quot; alt=&quot;phone-camera&quot; /&gt;
&lt;img src=&quot;/img/text_img/phone-camera_2.jpg&quot; alt=&quot;phone-camera-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到，从结构上来说，与人眼是非常类似的。 人眼通过睫状肌调节来改变焦距，而手机通过音圈马达条件镜头实现对焦(需要注意的是早期摄像头不带马达，因此是定焦的)。人眼通过视网膜感光并通过视觉神经传输信号，而摄像头则是通过CMOS来感光。&lt;/p&gt;

&lt;p&gt;但是人眼和器件的感光能力是有差异的。以下图为例. 从频谱上来说，CMOS的感光能力与人眼是有差距的。这虽然意味着从CMOS最终的成像其实与人眼所看到的是不一样的，但是有时候正好为我们所用，比如在黑暗环境下就能让我们看到更多东西。不过正常情况下，是需要滤光片过滤掉一些频谱的光源&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;某 CMOS 感光能力
&lt;img src=&quot;/img/text_img/cmos_sense.png&quot; alt=&quot;cmos_sense&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;人眼感光能力
&lt;img src=&quot;/img/text_img/eye_sense.png&quot; alt=&quot;eye_sense&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而在CMOS的排布上似乎也是模仿人眼。人眼的视锥细胞是各有分工，有的对红色敏感，有的对绿色敏感。而在摄像头上，人们给每一个像素都加上了红色或绿色或蓝色的滤光片过滤，最终的图像是一个二维的，由单一红点、绿点、蓝点组成Bayer pattern。厂家宣传的几百万几千万像素指的就是单色的像素。如何形成我们看到的图像则需要经过debayer或者叫demosaic的过程插值还原。
demosaic可以参考一些文章，或者开源库。比较常规基础。
&lt;img src=&quot;/img/text_img/bayer_pattern.png&quot; alt=&quot;bayer_pattern&quot; /&gt;
&lt;img src=&quot;/img/text_img/debayer.png&quot; alt=&quot;debayer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还得加上这张图，表示人眼的&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnbeta.com/articles/tech/850243.htm&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;那软件算法呢&quot;&gt;那软件算法呢？&lt;/h3&gt;
&lt;p&gt;人眼对焦的时候，我们从来没有考虑过一个问题，就是&lt;code class=&quot;highlighter-rouge&quot;&gt;清晰&lt;/code&gt;这个概念。对人类而言，清晰似乎就是一种感觉，但是当手机在拍照的时候，它是通过什么指标判断是否是清晰的呢？如果不解决这个问题，手机无法通过程序控制镜头移动到最清晰的位置。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;怎么定义一张图片是否清晰？&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;ISP 内部，使用一个简单的filter kernel，对选择的roi进行逐行处理得到特定区域的FV值。根据horizontal和vertical方向区分为H1/V1, 当我们进行对焦过程中，这一计算过程是每一帧都有，所以每次lens move结束，都可以得到一个fv值，最简单的hill-climb 算法就是找出FV值最大的区域，就是最清晰的。此时可以结束对焦，不再移动lens。&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;但相机发展至今，使用FV值这种方式太慢了，后面随着sensor厂家的推陈出新（对焦的进步几乎就是器件和算法的综合），推出了相位对焦（PDAF）。PDAF可以直接得出距离，根据PD点的差值，这使得我们不再需要反复移动lens来找到这个FV而是直接得出最后的距离。&lt;/p&gt;

&lt;p&gt;PD的引入是从iphone5开始的，至今已经有好几年了，sensor厂的pdsensor也从普通的mask形态的pd，改进为2x1的sparse PD，到dual-pd.到现在最新的2x2 pd imx689sensor, 每一步都是整个产业链的配合，使得我们的对焦能在0.1秒内就完成（3帧以内， 30fps）。&lt;/p&gt;

&lt;p&gt;但从今年2019年的趋势看，pd几乎已经见顶了。因为现在的sensor pixel数量已经从当年的12M进化到48M甚至108M，这种恐怖的pixel点数，使得PD计算耗时倍增。但是为了对焦质量，减少PD点也是不可取的，而且对焦已经不仅仅是对准一个区域，而是需要准确识别遮挡，这对PD输出质量要求非常之高。于是&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;一方面，PD的计算开始像当年的FV一样，从软件放到硬件去计算，ISP内部继承了专门的PD模块去处理巨量的PD点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;另一方面，TOF开始逐渐盛行。因为激光测距有几个好处，一个是直接的物理测距没有什么复杂的计算，AF就是希望知道这个信息。另一个就是在激光测距范围内，不受低光照的影响，而PD在低光照情况下是受到影响的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;接下来还有哪些可以改进的&quot;&gt;接下来还有哪些可以改进的？&lt;/h3&gt;
&lt;p&gt;玩法的创新：希区柯克变焦？&lt;/p&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Autofocus&quot;&gt;autofocus  wiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tuitionphysics.com/2016-mar/physics-behind-accommodation-of-the-human-eye/&quot;&gt;physics-behind-accommodation-of-the-human-eye&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/34765747&quot;&gt;知乎：人眼是如何对焦和防抖的&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/photography-secrets/whats-the-difference-between-a-camera-and-a-human-eye-a006a795b09f&quot;&gt;whats-the-difference-between-a-camera-and-a-human-eye&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 11 May 2019 00:00:00 +0800</pubDate>
        <link>/2019/05/11/autofocus_guideline/</link>
        <guid isPermaLink="true">/2019/05/11/autofocus_guideline/</guid>
        
        <category>技术</category>
        
        
      </item>
    
      <item>
        <title>喉返神经与迭代开发</title>
        <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;喉返神经&lt;/strong&gt;是生物学上的概念，而&lt;strong&gt;迭代开发&lt;/strong&gt;则是一个软件上的概念，看上去就是两个时间的东西，怎么会想到在写这个呢？&lt;/p&gt;

&lt;p&gt;但是从一个看了不少专业外书籍的程序猿的视角，这两个概念有些内在的关联，甚至我觉得程序员在迭代开发的时候能从喉返神经的例子中获得一些启示。&lt;/p&gt;

&lt;h3 id=&quot;喉返神经&quot;&gt;喉返神经&lt;/h3&gt;

&lt;p&gt;我们生而为人，总会为人体各种精密的构造而叹服，总会发问：倘若没有神/上帝的安排，怎么能出现这么精巧的设计呢？ 一定存在一个&lt;code class=&quot;highlighter-rouge&quot;&gt;总设计师&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在最初的时候绘制了一张&lt;strong&gt;完美的蓝图&lt;/strong&gt;，然后人类就按照蓝图被组装出来。&lt;/p&gt;

&lt;p&gt;但是喉返神经的发现，让人们开始怀疑，&lt;strong&gt;为什么这条神经的走向如此奇特？&lt;/strong&gt; 如果真的存在这个&lt;strong&gt;总设计师&lt;/strong&gt;，那么为什么这种看上去是一个明显错误的&lt;/p&gt;

&lt;p&gt;地方还存在，而且不仅仅是人类，还在许多动物身上同样存在。&lt;/p&gt;

&lt;p&gt;如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/text_img/houfan.png&quot; alt=&quot;houfan&quot; /&gt;&lt;/p&gt;

&lt;p&gt;支配喉部运动的神经，竟然不是直接从大脑走向喉部，而是先从心脏处绕了个大湾再回到咽喉。&lt;/p&gt;

&lt;p&gt;如长颈鹿这种拥有长脖子的动物，喉返神经也是如此走向。实在是痛苦。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/text_img/houfan_changjinglu.png&quot; alt=&quot;houfan_changjinglu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如维基百科所述：&lt;code class=&quot;highlighter-rouge&quot;&gt;喉返神经被视为脊椎动物演化上一个十分著名的历史遗迹&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;对软件迭代开发的启示&quot;&gt;对软件迭代开发的启示&lt;/h3&gt;

&lt;p&gt;从喉返神经这个例子我们可以看到，即便是人体，在进化过程中也会存在各种错误，但是生存是第一要务，如果还能用，不是生死攸关，后面还会有机会慢慢&lt;/p&gt;

&lt;p&gt;修改。但是一旦走向死胡同，那个对应的&lt;strong&gt;分支&lt;/strong&gt;可能就会逐步在历史中消亡了。&lt;/p&gt;

&lt;p&gt;在软件开发中，似乎也有类似的观念。当前的伟大软件都是从一个非常简陋的版本开始的，然后逐步迭代开发，一代代的试错，一代代的优化，最终&lt;/p&gt;

&lt;p&gt;长成了一棵参天大树，以致没有一个人能看清全貌。&lt;/p&gt;

&lt;p&gt;倘若一个工程师，在学完&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World!&lt;/code&gt;之后，你告诉他这样继续下去就能造出linux，造出git，造出windows。我想这几乎是难以想象的，但半个世纪的软件&lt;/p&gt;

&lt;p&gt;行业进化至今，确确实实就达到了这个效果。那么迭代开发最重要的是什么呢？如果参考进化论的话？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;首先，得有一个能跑起来的实例。不管它有多简陋&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如单细胞动物的出现，虽然它很简单，但却是一种生命体，后续的一切都是基于它的进化历程。能work就是最重要的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;小步快跑&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每次改进一点点，即便再微小，持续长时间也能成为一个新的物种。想想看，人类的进化历程，从没有一个完备的图纸，却在20年一个代际间逐步进化，&lt;/p&gt;

&lt;p&gt;可能每一代所获得的优点很小，说不定有些还是看上去不那么有用的发色、肤色等等，但累积了几十代几百代几千代之后，无论从身体还是思想，都与&lt;/p&gt;

&lt;p&gt;当初的智人完全不同。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;无惧犯错&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在小步快跑的基础上，犯错并不可怕，及时改正。进化过程中都会出现各种意外，有些好的就被保留，而不好的就摒弃，在人类的基因库&lt;/p&gt;

&lt;p&gt;中，类似的未表达的基因成千上万，但是并非无用。很可能它们曾经帮助人类抵御一些目前不可知的危险。而一些错误也可能被保留。犯错是必然的，&lt;/p&gt;

&lt;p&gt;不需要畏惧。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;重要的是总体工作效率&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;即便人体这么精密的仪器，也存在喉返神经这种不合理之处，那么很多显得很丑陋的历史遗留代码存在于各种项目中就不足为奇了。&lt;/p&gt;

&lt;p&gt;但是只要系统的功能，性能，可靠性在稳步提升，我们应该允许它们的存在，然后通过适当的重构将它们逐步替换&lt;/p&gt;

&lt;p&gt;比如linus的那次发怒就导致了dts的出现并改进了linux这一块的实现方式。&lt;/p&gt;

&lt;p&gt;而在不明确模块作用的前提下，盲目替换，或许会带来更大的灾难。&lt;/p&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;https://zh.wikipedia.org/zh/%E5%96%89%E8%BF%94%E7%A5%9E%E7%B6%93&lt;/li&gt;
  &lt;li&gt;https://www.guokr.com/article/38500/&lt;/li&gt;
  &lt;li&gt;«盲眼钟表匠»&lt;/li&gt;
  &lt;li&gt;大教堂与集市: 似乎类似的观点在这本书也能找到&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 05 May 2019 00:00:00 +0800</pubDate>
        <link>/2019/05/05/Recurrent_Laryngeal_Nerve_and_Iterative_dev/</link>
        <guid isPermaLink="true">/2019/05/05/Recurrent_Laryngeal_Nerve_and_Iterative_dev/</guid>
        
        <category>随想</category>
        
        
      </item>
    
      <item>
        <title>vim打开大文件时无法高亮语法</title>
        <description>&lt;h3 id=&quot;问题&quot;&gt;问题&lt;/h3&gt;

&lt;p&gt;使用vim打开非常大的文件时，具有一定的优势，尤其是通过ssh远程连接客户代码，但是经常会碰到语法无法高亮的情形。&lt;/p&gt;

&lt;p&gt;这时候，如果往上翻到高亮处，再逐页往下，就能高亮。这样看代码实在有点麻烦。在我的机器上，如果打开一个20000行左右的源码，&lt;/p&gt;

&lt;p&gt;就有可能出现后半段无法高亮的情形。尤其是在跳转时，突然从高亮代码跳转到一片灰蒙蒙的代码，非常影响效率和心情。&lt;/p&gt;

&lt;h3 id=&quot;解决&quot;&gt;解决&lt;/h3&gt;

&lt;p&gt;google后发现，社区上其实已经有了讨论。&lt;/p&gt;

&lt;p&gt;https://github.com/vim/vim/issues/2790&lt;/p&gt;

&lt;p&gt;因为对于vim的渲染而言，会有一个时间限制，如果超出限制当页未能完成，就停止了。这时候就有了第一个解法：&lt;/p&gt;

&lt;p&gt;增加渲染时间到最大： &lt;code class=&quot;highlighter-rouge&quot;&gt;set redrawtime=10000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;遗憾的是，在我这行不通，可能是即便设置了最大时间，依然无法完成。这样做反而对打开文件性能有巨大的影响。明显变慢，因为渲染时间更长了。&lt;/p&gt;

&lt;p&gt;那还有没有其他方法？ 有，就是强制刷新本页，这样做对当前文件是有效的，能解决。&lt;/p&gt;

&lt;p&gt;办法就是在vim里执行&lt;code class=&quot;highlighter-rouge&quot;&gt;syntax sync fromstart&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样是能解的。不过在这过程中，发现&lt;code class=&quot;highlighter-rouge&quot;&gt;syntax on&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;syntax off&lt;/code&gt;比较情形下，明显开了语法高亮时特别慢，不够流畅。&lt;/p&gt;

&lt;p&gt;综合下来的解决方案就是，如下配置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot; vim卡顿 https://github.com/wklken/k-vim/issues/233
&quot; 主要是因为syntax on. 如果syntax off会好很多
set re=1
set ttyfast
set lazyredraw

&quot;map syntax sync fromstart
nmap tu :syntax sync fromstart&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样在打开时速度快，不卡顿。遇到大文件无法渲染完成时，只需要使用快捷键&lt;code class=&quot;highlighter-rouge&quot;&gt;tu&lt;/code&gt;即可迅速完成。 毕竟过万行的代码是少数的，为了极少数大文件的&lt;/p&gt;

&lt;p&gt;语法高亮而牺牲速度是不值得的。&lt;/p&gt;
</description>
        <pubDate>Wed, 01 May 2019 00:00:00 +0800</pubDate>
        <link>/2019/05/01/why-vim-syntax-not-work/</link>
        <guid isPermaLink="true">/2019/05/01/why-vim-syntax-not-work/</guid>
        
        <category>vim</category>
        
        
      </item>
    
      <item>
        <title>手机相机发展简史</title>
        <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;手机最初的作用仅仅是进行通话，交流。但是随着技术的进步，人类需求的不断演进，越来越多的功能被集成到一个小小的手机里，也改变了许多传统产业。
比如手机取代了曾经的MP3、随身听市场，人们已经习惯了从手机app上找音乐听音乐。手机直接开启了PC时代之后的移动互联网时代，PC时代的巨头忽然之间发现
自己的用户群体在萎缩，而使用手机，拥抱移动互联网的用户在爆炸式的增长。许多传统的互联网用了十多年打下的江山，在移动互联网时代迅速被挤压、超越。典型的
如今日头条，滴滴，蚂蚁金服。
而现在正在发生的，是手机正在逐步压缩卡片机市场，越来越少的人们会专门购买一部相机，因为手机的拍照功能已经越来越强大了，出片质量&lt;strong&gt;“不逊于”&lt;/strong&gt;传统卡片机。
卡片机和单反领域曾经的认知&lt;strong&gt;底大一级压死人&lt;/strong&gt;虽然还在发挥着作用，但任然无法改变市场被一步步挤占的事实。手机从软件和硬件多方面的迭代进化，短短几年就通过
逐步找准用户在&lt;strong&gt;社交分享&lt;/strong&gt;领域的痛点，不断攻城掠地。近些年更是出现手机厂商发布会必然会提及相机的改进，几乎与通信功能同等重要甚至成为卖点。&lt;/p&gt;

&lt;p&gt;无论从哪一个方面来说，智能手机相机发展都是一个非常庞大的题目，甚至可以写成一本专门的书籍。所以所写只是个人的一些理解。而且本文其实并不关注&lt;strong&gt;手机相机像素&lt;/strong&gt;这个大众非常关注的问题，因为一般在商场里，似乎一个大爷很容易就能通过1600w像素的相机好于800w像素的相机，但是其实不是。即便是一个200w摄像头拍出的照片，也可以通过插值变成500w像素的照片。最终成片的细节完全不是看像素，最初的山寨机市场混战中，相信非常多的消费者被像素这个概念误导，而最终即便是1200w像素的相机也被苹果那颗祖传800w摄像头打爆。本文实际关注的是手机厂商对成像质量优化所走的路。&lt;/p&gt;

&lt;h3 id=&quot;上古时代为手机装上一双眼睛&quot;&gt;上古时代–为手机装上一双眼睛&lt;/h3&gt;
&lt;p&gt;第一部带手机的智能手机是夏普&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%85%A7%E7%9B%B8%E6%89%8B%E6%A9%9F&quot;&gt;wiki&lt;/a&gt;,11万像素，从现在的眼光看，只是解决了手机能通过
摄像头获取图片的问题。几乎谈不上画面质量。
&lt;img src=&quot;/img/phonecamera/sharp_camera_2.png&quot; alt=&quot;sharp-camera-2&quot; /&gt;
&lt;img src=&quot;/img/phonecamera/sharp_camera_1.png&quot; alt=&quot;sharp-camera-1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;中古时代让手机看的更清晰&quot;&gt;中古时代–让手机看的更清晰&lt;/h3&gt;
&lt;p&gt;当手机拥有了摄像头之后，下一步就是如何进化的问题了。从现有的资料看，以iphone为智能机元年的话，之前的手机霸主是诺基亚。而参考诺基亚N95的配置，CPU主频为
332MHZ，内存容量为18+142M。而相机为500万像素。从现有找到的资料看&lt;a href=&quot;https://www.gsmarena.com/nokia_n95_camera-review-139.php&quot;&gt;N95 camera&lt;/a&gt;, 所能进行的配置
只有EV，画面色彩风格和Zoom(应该是digital zoom),并能进行自动对焦。从这里看，其画质有提升，但是并不是特别明显，而首先解决的，其实是清晰度问题，毕竟如果画面不清晰，那么一切优化就失去了根基。后置摄像头能自动对焦是一项比较重要的提升，而另一项重要的提升则是selfie camera，其实就是用于自拍的前置相机。虽然当时的自拍非常原始，成片几乎也就是用来换个qq头像的作用, 但是厂商敏锐的发现了这一功能所带来的需求。以致出现主打前置自拍而非后置相机的手机。&lt;/p&gt;

&lt;h3 id=&quot;近代--怎么拍怎么美&quot;&gt;近代 – 怎么拍怎么美&lt;/h3&gt;
&lt;p&gt;强大的ISP处理能力一直是手机芯片厂商升级的重要卖点。从sensor输出的mipi raw到YUV到最终的jpeg，无一不需要细致的处理，而之所以需要一个专门的ISP处理，是因为当图像太大的时候，采用常规的cpu处理已经来不及了，视频录像时，是要求30帧每秒，而每一帧都需要进行的3a，去噪，CPU根本没法保证能及时处理完。
sensor的输出都是bayer pattern，
&lt;img src=&quot;/img/phonecamera/bayerpattern.jpg&quot; alt=&quot;bayer-pattern&quot; /&gt;
如果我们将R/G/B三中色彩分别取出，实际上图像大小是 0.5&lt;em&gt;width， 0.5&lt;/em&gt;height。也就是大小最终缩水了1/2。但是为什么我们看到的图实际上是完整的width*height呢。&lt;/p&gt;

&lt;p&gt;实际上，ISP在raw域会进行&lt;strong&gt;demosaic处理&lt;/strong&gt;，进行水平、垂直方向的插值(实际上插值算法非常重要，因为从原始的bayer到最终的rgb，如果插值算法不好，会发现边缘的色彩发虚，所以各家都有不同)。&lt;/p&gt;

&lt;p&gt;而ISP在demosaic之前需要进行的操作包括:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;black level correction&lt;/strong&gt;(黑电平校正： 原因是sensor在完全无光环境下有一个基础噪声需要取出),&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;线性化&lt;/strong&gt;(sensor的r/gr/gb/b通道，在不同环境下的输出响应其实并不完全一直，如果我们不处理，后续在添加gain的时候会造成色偏)，&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;gamma&lt;/strong&gt;（调整亮度）,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BPC&lt;/strong&gt;(坏点校正：如果sensor输出的某个点是明显的坏点，不矫正也会导致最终的出图有异常)。&lt;/p&gt;

&lt;p&gt;ISP在raw域还有一个重要工作就是输出各种&lt;strong&gt;统计信息(stats)&lt;/strong&gt;用于aec/awb/af的处理，这部分需要专门的硬件做才能保证处理速度。而这些统计信息，如画面亮度/行/列/rg、bg统计/fv统计，则会输入到软件模块进行3a处理。&lt;/p&gt;

&lt;p&gt;而当ISP进行demosaic之后，经过一次rgb转yuv(色域的转换，有固定公式)，之后会进行一些色彩校正、增强和图像的切割。&lt;/p&gt;

&lt;p&gt;ISP的另一个重要工作就是&lt;strong&gt;降噪&lt;/strong&gt;，去除各种噪声，让画面更清晰。降噪的手段随着硬件的处理能力升级也一次次升级，从普通的滤波+叠加能去除一部分噪声，到后来的计算机视觉一些复杂算法的引入能对图像进行运动分析，去除ghost鬼影和运动模糊等。&lt;/p&gt;

&lt;p&gt;而且手机由于sensor感光能力远弱于单反，在黑暗环境的噪声是非常严重的，结果就是拍出来的照片一片糊。为了解决这个问题，手机芯片厂如高通华为都不约而同地引入了多帧降噪，通过增加曝光时间和多张照片合成来弥补。最终的效果非常惊人，如果按照华为的宣传(P30)，几乎就是黑夜如白昼。。。当然我还是不太信的。&lt;/p&gt;

&lt;p&gt;这一时期，由于安卓的进步，如从android4到android5到之后的版本，android开始不仅仅是只能控制拍照与否，而不能控制更多参数。到后面的一整套的参数传递返回，我们不仅仅能知道硬件的曝光信息，还知道底层最终输出的aec gain/awb gain（详见andorid hal文档）。上层app终于可以直接处理sensor输出的raw并获知底层的处理参数进行进一步调优，而不是像早期的图像处理app，只是对最终的jpeg进行一下变换，添加有趣的元素。&lt;/p&gt;

&lt;p&gt;而这一时期，除了ISP的进步，系统的进步。sensor厂商也在不断推陈出新。几个重要的升级为：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;为手机引入了PDAF对焦。这本来是单反专用. PDAF的引入使得图像对焦能力大大增强，原先需要计算每帧的fv然后查找最大的那帧，对焦最快也得5帧以上，而pdaf通过pdlib直接可以计算出最清晰位置，理想的情况3帧就能完成对焦(这同时也得归功于cpu处理能力的增强，毕竟pdaf运算量比较大，而到了后期的dual-pd更是恐怖，几乎每帧的运算量都是普通pdaf的10倍以上，因为dual-pd的pd点像素密度是100%).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;提供了单帧多曝光能力，也就是zzHDR或3HDR。同一帧能进行多组曝光，使得原先需要3张才能完成的HDR拍照，现在只需要更少的帧数。还可以在预览时就使用，这直接提升了画面的动态范围，提升了成片的表现力。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pixel合成。也可以称之为super pixel。手机相机有一个梦寐以求的东西就是单反级别的感光能力，但是受制于手机空间，实际像素大小虽然一直在进步，依旧难以达到单反级别。于是sensor厂商用了一个非常创造性的思路，如果单个像素感光能力不够，我们能不能合并呢？这就是现在非常火热的4800w像素QCFA sensor。光线好时就是4800w，而光线差的时候，就合并周围的像素, 提升感光能力。(也许这个思路的提出还有一个因素就是先驱HTC super pixel在2007年的失败。2um的像素尺寸但是只有400m像素，即便怎么宣传，估计普遍被认为不如800w的普通sensor。毕竟当时的市场并不能完全理解这么复杂的概念)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/img/phonecamera/qcfa.jpg&quot; alt=&quot;qcfa&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从个人观点看，还有一个决定手机图像处理能力的，并不仅仅有硬件，还有更重要的软件。因为软件处理代表着手机芯片/手机OEM厂商对图像的理解能力。
&lt;strong&gt;本质上这是一个工程问题，而不是一个理论问题。&lt;/strong&gt;
不仅仅需要应用到理论，还需要考虑到实际应用过程中的各种意外，比如我们面临的环境可能有多个光源，那么画面拍出来就是显得很黄，或者发白发蓝，我们怎么处理。这些都是另一个岗位camera tuning 工程师，把不正确的图片输入，然后手动调整算法模型中的处理，单个case针对性的调整才能获得的效果。&lt;/p&gt;

&lt;p&gt;每一部手机都是经历过成千上万张照片，成千上万个场景、光源的实拍然后实时调整才能让我们实现怎么拍怎么美的。这是一个比较系统的合作和不断演进，缺一环都无法达到现有的效果。&lt;/p&gt;

&lt;h3 id=&quot;现代--神经网络混合处理&quot;&gt;现代 – 神经网络混合处理&lt;/h3&gt;
&lt;p&gt;现在的神经网络大火，手机厂商更是无法视而不见。
神经网络本质是一个黑箱，通过tagged data训练出一个模型然后应用。这种处理方式与传统的手机厂商是迥异的。我们更多的是从应用侧(app)看到其应用。但是实时的在底层处理，目前应该还没有(P30 拍月亮这件事让我存疑，但是即便那是真的也是上层底层配合，而不是存粹的底层处理)。因为神经网络能解决对不对的问题，也就是这个场景看起来是不是正常的问题，它可以通过已有的数据猜，但是它无法解决&lt;strong&gt;个人喜好&lt;/strong&gt;的问题。每一张自拍即便色彩都是ok的，但是对于有些人可能更喜欢偏粉偏可爱的画风。而且对于传统的处理方式，每次结果其实都相对确定，而神经网络，感觉目前还不能完全取代现有的isp。但是它可以作为ISP的一个重要补充，毕竟现在的终端已经有那么强大的计算、推断能力，完全可能衍生出一些新玩法。&lt;/p&gt;

&lt;p&gt;而computer version计算机视觉的算法也越来越多的被引入。比如在录像时跟踪一个移动的物体，就需要计算机视觉提取目标信息然后设置AF/AEC ROI，进行跟踪。现在的硬件已经能非常好的支持cv操作，比如qualcomm的fastcv, 这会越来越多的在底层应用，进行边缘提取，已经画面目标的一些增强操作。&lt;/p&gt;

&lt;p&gt;混合采用多种技术成为主流。无论是手机厂商还是在应用侧。&lt;/p&gt;
&lt;h3 id=&quot;未来-现实与虚拟的无缝连接&quot;&gt;未来 – 现实与虚拟的无缝连接&lt;/h3&gt;
&lt;p&gt;未来的进化，其实需要所有人思考，我们到底希望看到的是一个真实的世界还是一个你所希望看到的但并不一定真实的世界?
&lt;img src=&quot;/img/phonecamera/touhaowanjia.jpg&quot; alt=&quot;touhaowanjia&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里借用电影«头号玩家»的意思就是，随着技术的进步（cpu、gpu、isp、5G），我们看到的并不是从sensor里直接感知的图像，而是经过一轮又一轮处理的图。我们每个人都有投票权，决定未来看到的是什么。&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Apr 2019 00:00:00 +0800</pubDate>
        <link>/2019/04/20/SmartPhoneCameraHistory/</link>
        <guid isPermaLink="true">/2019/04/20/SmartPhoneCameraHistory/</guid>
        
        <category>TED</category>
        
        
      </item>
    
      <item>
        <title>互联网巨头在干什么</title>
        <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;在国内互联网巨头中，tencent毫无疑问是霸主之一。在他手上的拥有独一无二的社交网络资源，几乎全中国人都在tencent的平台上联络、交友、娱乐、支付。在AI技术如此火热的背景下，我们确很难窥见巨头究竟投入了多少资源，试图在发掘些什么(也有可能是我这种门外汉的观感)。&lt;/p&gt;

&lt;p&gt;在Youtube上意外看到一个tencent人所做的分享给了我一些线索。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/mit_speech/page1.jpg&quot; alt=&quot;page1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;社交分享图片增强&quot;&gt;社交分享图片增强&lt;/h3&gt;
&lt;p&gt;tencent的看家本领就是社交，因此提升人们分享体验是很顺理成章的。从下面这张图可以看出，tencent基于神经网络对用户分享的图片进行优化，一方面是增强细节；另一方面是增强色彩;同时应该会进行resize。毕竟人们分享的图片size各异，需要进行一些nomalize。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/mit_speech/page2.jpg&quot; alt=&quot;page2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另一个重要的增强方向，就是提升暗光表现，从PPT上所见，主要是提升了画面的动态范围，从手机厂商的角度来说，我觉得这个优化的角度是不一样的。如第二张图，整个画面个人感觉虽然变得更亮，一些暗部细节得到体现，但是天空高亮处的层次细节变得更差了。不过对于社交分享而言，这种提升可能更讨喜。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/mit_speech/page3.jpg&quot; alt=&quot;page3&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;姿态估计&quot;&gt;姿态估计&lt;/h3&gt;
&lt;p&gt;从图像中提取出人体姿态。不过这应该是在云端计算，当前手机性能各异，没有办法获得统一的体验
&lt;img src=&quot;/img/mit_speech/page4.jpg&quot; alt=&quot;page4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;给予姿态估计，Tencent在手机QQ上已经开放了一项互动跳舞的功能，应该说很有趣，但是目前看来并不是特别理想。从演讲的视频上看识别的速度并不太理想。
&lt;img src=&quot;/img/mit_speech/page5.jpg&quot; alt=&quot;page5&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;视频吸引力分析&quot;&gt;视频吸引力分析&lt;/h3&gt;
&lt;p&gt;对于社交分享巨头而言，尤为关注当前的人们对什么感兴趣。tencent基于用户在观赏视频时进行的主动行为，比如快进、快退、弹幕等等获得人们对当前视频吸引力细分图。他们知道人们爱上哪些片段，或许以后经过大量的学习，能反过来推断、指导电视电影的拍摄(应该说已经是事实了，比如Nexflix纸牌屋，可惜最后口碑也扑街了)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/mit_speech/page6.jpg&quot; alt=&quot;page6&quot; /&gt;
&lt;img src=&quot;/img/mit_speech/page7.jpg&quot; alt=&quot;page7&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;看图说话&quot;&gt;看图说话&lt;/h3&gt;
&lt;p&gt;没错，竟然希望通过对图像元素的分割和语义方面的研究，最终能实现用一个短句描述一张图片。比如下面的图片，最后描述为一群人在山顶行走(a group of persons walk on top of a hill)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/mit_speech/page8.jpg&quot; alt=&quot;page8&quot; /&gt;
&lt;img src=&quot;/img/mit_speech/page10.jpg&quot; alt=&quot;page10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在微信小程序里的AI实验室里已经退出的&lt;strong&gt;智能识图&lt;/strong&gt;已经上线，遗憾的是，我在试用的时候，发现效果并不好。不知道后台还在支持。
&lt;img src=&quot;/img/mit_speech/page9.jpg&quot; alt=&quot;page9&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;健康产业&quot;&gt;健康产业&lt;/h3&gt;
&lt;p&gt;健康应该是社会影响力非常大的一个领域，IBM的沃森很早就开始进行病例分析，并试图消除医生水平之间差异导致的误判。从数据宣传上看目前是很理想，但是这种监督学习，我觉得离真正的应用还很远，因为完全信赖一个机器的诊断不仅仅从情感上很难接受，事实上也是很难处理各种corner case。一旦误判就完了。
&lt;img src=&quot;/img/mit_speech/page11.jpg&quot; alt=&quot;page11&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;后记&quot;&gt;后记&lt;/h3&gt;
&lt;p&gt;巨头们拼的其实是未来，他们在积极探索，充分利用现有的数据集，试图让机器来揣测人性、吸引人们注意力、掌控人们的时间。这让我对于未来，一个由算法把控的世界充满警惕(比如《算法霸权》就讨论了这方面)。人们都有自己的偏好，而技术不应该有偏好，如果技术为了获取利润而充满了各种偏好，甚至主动引入各种偏见，只为了拉拢更大的群体，未来的世界会变得更加冰冷。比如微博抽奖事件，事先会排除各种所谓的&lt;strong&gt;不活跃&lt;/strong&gt;用户，更偏爱主动分享，活跃的人群，那其他并不愿意花时间在这些软件上的所谓不活跃用户，他们的声音被忽略了。&lt;/p&gt;

&lt;p&gt;AI的起点都是为了探索人类的情感和智慧，但是人性的复杂可能并不是简单的模拟、堆砌神经网络能实现的。&lt;/p&gt;

&lt;p&gt;愿世界更美好。&lt;/p&gt;

</description>
        <pubDate>Thu, 04 Apr 2019 00:00:00 +0800</pubDate>
        <link>/2019/04/04/What-AI-gaint-Doing/</link>
        <guid isPermaLink="true">/2019/04/04/What-AI-gaint-Doing/</guid>
        
        <category>TED</category>
        
        
      </item>
    
      <item>
        <title>世界观出现偏差的三种原理</title>
        <description>&lt;h3 id=&quot;ted资源&quot;&gt;TED资源&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;演讲视频&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;https://pc.tedcdn.com/talk/stream/2018X/Blank/JMarshallShepherd_2018X-1500k.mp4&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;字幕文本&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;https://ted2srt.org/talks/j_marshall_shepherd_3_kinds_bias_that_shape_your_worldview&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;在我们认知这个世界的过程中，总是伴随着各种偏差。我们所认为的与真实的世界是不同的。这个TED演讲就从一个气象学家的角度来说明这种偏差&lt;/p&gt;

&lt;h3 id=&quot;什么时候会下雨&quot;&gt;什么时候会下雨？&lt;/h3&gt;
&lt;p&gt;作为一名气象学家, Marshall博士经常会被问道的问题是&lt;strong&gt;什么时候会下雨？&lt;/strong&gt;但是气象学家其实也不知道这个问题。大多数人都不会问&lt;strong&gt;如果到大楼楼顶，将一个球丢下去，它会不会下落？&lt;/strong&gt;这是因为人们认可&lt;strong&gt;重力是一个客观规律&lt;/strong&gt;。但面对气象学家的时候，人们经常会混淆&lt;strong&gt;气候与天气&lt;/strong&gt;。气象学家知道大西洋上有一个巨大的气旋正在形成具有超强破坏力的风暴，但是只能预警，却不能准确预测出&lt;strong&gt;哪一天哪一个时间你家的院子里会积满水。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;公众与科学家之间的认知偏差&quot;&gt;公众与科学家之间的认知偏差&lt;/h3&gt;
&lt;p&gt;以气候变化为例，87%的科学家相信人类造成了气候变化，但只有50%的公众相信。科学家已经有足够的证据表明这一点，但公众的认知没有被改变。&lt;/p&gt;

&lt;h3 id=&quot;三个重要原理&quot;&gt;三个重要原理&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;confirmation bias&lt;/strong&gt;
&lt;img src=&quot;/img/ted/confirmation_bias_1.jpg&quot; alt=&quot;confirmation_bias_1&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;确认偏差：人们总是选择性的回忆、收集有利信息，而忽略不利的信息。
简单而言，就是&lt;strong&gt;当你认为什么是对的，你总是倾向于查找你相信的信息，而去忽略与你观点不一致的信息。长此以往，你的观点被不断强化，即便是错误的，依然被你自己当作真理&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt; 现实世界有太多这种例子了。有人相信手机信号塔致癌，无论怎样解释电离辐射和电磁辐射的区别，无论实验结果。仍然选择相信小道消息，并以此对抗信号塔的树立。又或者当你爱看某一类的新闻如末日说，客户端会不停的推荐类似观点，不断让你相信。（这里我认为&lt;strong&gt;算法推荐信息流有时候对独立思考是不利的&lt;/strong&gt;）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/ted/confirmation_bias_2.jpg&quot; alt=&quot;confirmation_bias_2&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;邓宁-克鲁格效应（Dunning-Kruger effect）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;这张图就可以很好的解释. &lt;strong&gt;一知半解的人反而无比自信，了解的越多越心存敬畏&lt;/strong&gt;, 或者说每个人都是从&lt;strong&gt;不知道自己不知道&lt;/strong&gt;进化到&lt;strong&gt;知道自己知道&lt;/strong&gt;的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/ted/Dunning-Kruger-effect.jpg&quot; alt=&quot;Dunning-Kruger-effect&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;cognitive dissonance&lt;/strong&gt;
如果对同一个事物，有2个不同的解释相互冲突，大部分人就可能会放弃或改变认知，从而达到消除冲突、恢复一直的状态。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;最常见的就是天气预报，天气预报有90%的概率是对的，但人们总会记住它犯错的那几次。不过我倒觉得从个人角度比较好理解，因为一旦你相信天气预报没有雨，但是实际上来了一场大阵雨导致你淋湿，即便从概率上说只有10%，但你从此一定会怀疑天气预报是错误的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;如何改变&quot;&gt;如何改变？&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;扩展你的知识范围，避免当井底之蛙。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;如果你确信一件事是对的，那么深挖一下，究竟是哪些具体的案例导致你深信不疑，是否有可能是来源于一些偏见，比如地域、政治倾向、信仰等等。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 01 Apr 2019 00:00:00 +0800</pubDate>
        <link>/2019/04/01/TED-Talks-3-kinds-of-bias-that-shape-ypur-worldview/</link>
        <guid isPermaLink="true">/2019/04/01/TED-Talks-3-kinds-of-bias-that-shape-ypur-worldview/</guid>
        
        <category>TED</category>
        
        
      </item>
    
      <item>
        <title>使用vim+cscope如何动态更新代码索引</title>
        <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;对于使用source insight的人而言，并不存在这个问题，因为source insight在文件变动时自动就会处理索引的更新。但是对于使用vim+cscope的同学而言，就没那么方便了。&lt;/p&gt;

&lt;p&gt;试想一下，你正在修改代码，然后cscope找函数，发现由于修改更新了，找到的位置偏移了好几百行。。。这时候，退出再重新进入编辑。效率就极大降低了，
违背了我们用工具提高看代码效率的初衷。&lt;/p&gt;

&lt;h3 id=&quot;如何修改&quot;&gt;如何修改&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt;文件中添加下面函数。之后每次在阅读代码的同时就能直接按&lt;code class=&quot;highlighter-rouge&quot;&gt;F12&lt;/code&gt;更新代码索引了&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

map &amp;lt;F12&amp;gt; : call ReConnectCscope&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&amp;lt;cr&amp;gt;
func! ReConnectCscope&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cs kill 0&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;!./generate.sh&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;set csprg=~/cscope.sh&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cs add cscope.out&quot;&lt;/span&gt;
endfunc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;另附上面会用到的&lt;code class=&quot;highlighter-rouge&quot;&gt;generate.sh&lt;/code&gt;, 之所以使用generate.sh, 是为了自行过滤一些文件。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
date&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ctags done......&quot;&lt;/span&gt;
find &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;*.h&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*.c&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*.cc&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*.cpp&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*.py&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; cscope.files&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
find &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*.pl&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;cscope.files

date&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
cscope &lt;span class=&quot;nt&quot;&gt;-RCbq&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; cscope.files&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
ctags &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; cscope.files&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cscope done......&quot;&lt;/span&gt;
date&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使用vimrc文件定义快捷键执行更酷炫的操作&quot;&gt;使用vimrc文件定义快捷键执行更酷炫的操作&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;作为一名工程师，经常会需要&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt;远程连接到其他机器，这种情况下可能会有其他用户也在使用vim看代码，这时候如果我们轻易改变vim的配置，那么&lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt;很快就会被改得面目全非。所以问题来了： &lt;strong&gt;能不能定义一套配置，只有自己使用，其他人仍然使用默认的配置呢？&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;当然有！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;我们完全可以定义一套配置，通过快捷键生效！&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-vimrc&quot;&gt;示例如下：

&quot;Do this First : 首先需要安装plug脚本
&quot;curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
&quot;    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

&quot;把自己常用的一些脚本可以安装好
call plug#begin(&#39;~/.vim/plugged&#39;)
Plug &#39;vim-scripts/mru.vim&#39;
Plug &#39;ctrlpvim/ctrlp.vim&#39;
Plug &#39;tomasr/molokai&#39;
Plug &#39;octol/vim-cpp-enhanced-highlight&#39;
Plug &#39;lokaltog/vim-powerline&#39;
Plug &#39;t9md/vim-quickhl&#39;
call plug#end()

&quot;Magic time.执行F12快捷键后，我们可以配置色彩方案，配置插件设置。
&quot;一切都变得不一样，专属于你自己的一套配置。所有操作习惯都可以继续。多么美好！
&quot;some personal config
map &amp;lt;F12&amp;gt; : call PersonalConfigs()&amp;lt;cr&amp;gt;
func! PersonalConfigs()
exec &quot;colorscheme molokai&quot;
exec &quot;set laststatus=2&quot;
exec &quot;set fillchars+=stl:\\ ,stlnc:\\&quot;
exec &quot;set encoding=utf-8&quot;
exec &quot;let g:cpp_class_scope_highlight = 1&quot;
exec &quot;let g:cpp_member_variable_highlight = 1&quot;
exec &quot;let g:cpp_experimental_template_highlight = 1&quot;
exec &quot;let g:cpp_concepts_highlight = 1&quot;
exec &quot;let g:Powerline_symbols = &#39;compatible&#39;&quot;
&quot;exec &quot;nmap &amp;lt;Space&amp;gt;m &amp;lt;Plug&amp;gt;(quickhl-manual-this)&quot;
&quot;exec &quot;xmap &amp;lt;Space&amp;gt;m &amp;lt;Plug&amp;gt;(quickhl-manual-this)&quot;
&quot;exec &quot;nmap &amp;lt;Space&amp;gt;M &amp;lt;Plug&amp;gt;(quickhl-manual-reset)&quot;
&quot;exec &quot;xmap &amp;lt;Space&amp;gt;M &amp;lt;Plug&amp;gt;(quickhl-manual-reset)&quot;
exec &quot;set incsearch&quot;
endfunc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;如何使得cscope查找字符时不区分大小写&quot;&gt;如何使得cscope查找字符时不区分大小写&lt;/h3&gt;

&lt;p&gt;通常情况下，我们查找函数定义时，需要提供精确的名字，但是我们很难记住一个字符串同时还记住它第几个字符是大小写。&lt;/p&gt;

&lt;p&gt;cscope本身就具有忽略大小写的选项，我们需要打开即可。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先我们在home目录&lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;下创建一个脚本&lt;code class=&quot;highlighter-rouge&quot;&gt;cscope.sh&lt;/code&gt;,并赋予执行权限&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#/!bin/sh

cscope -C &quot;$@&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;然后修改vimrc如下&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-vimrc&quot;&gt;&quot; cscope settings
if has(&quot;cscope&quot;)
&quot;   set csprg=/usr/bin/cscope
&quot;主要修改就是这句，将调用/usr/bin下的cscope改为调用cscope.sh脚本
    set csprg=~/cscope.sh
    set csto=0
    set cst
    set nocsverb
    &quot; add any database in current directory
    if filereadable(&quot;cscope.out&quot;)
        cs add cscope.out
        &quot; else add database pointed to by environment
    elseif $CSCOPE_DB != &quot;&quot;
        cs add $CSCOPE_DB
    endif
    set csverb
endif

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;现在可以试着搜索一个字符串，完全不用顾及大小写的问题，舒服多了。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 01 Apr 2019 00:00:00 +0800</pubDate>
        <link>/2019/04/01/How-to-dynamic-update-the-tags-with-cscope/</link>
        <guid isPermaLink="true">/2019/04/01/How-to-dynamic-update-the-tags-with-cscope/</guid>
        
        <category>技能</category>
        
        
      </item>
    
      <item>
        <title>时间精力管理</title>
        <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;最近，异常火热的程序员抵制加班逐步蔓延。工作996，生病ICU广为宣传。&lt;/p&gt;

&lt;p&gt;程序员都经历过加班，但是加班真的能提高效率，增加工作总量吗？ 对于这个问题，我们需要从一些不一样的角度得到启示。&lt;/p&gt;

&lt;p&gt;《为什么精英都是时间控》这本书正是比较全面的讲述了这个问题。而作者是个医生，有着丰富的医学知识，对于提高工作效率的分析更具有说服力。&lt;/p&gt;

&lt;p&gt;但是需要吐槽的是，封面设计太Low!&lt;/p&gt;

&lt;h3 id=&quot;封面&quot;&gt;封面&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/img/books/manage-your-energy/bookcover.jpg&quot; alt=&quot;coverimage&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;什么是大脑的黄金时间&quot;&gt;什么是大脑的黄金时间&lt;/h3&gt;
&lt;p&gt;我们人类的大脑在早上起床后的两三个小时内最清醒也不会感到疲惫，而且经过一个晚上的休息处于一个非常有条理的状态，所以从早晨到上午的这段时间是一天中头脑技能最好的时间段，这段时间被称为 &lt;strong&gt;大脑的黄金时间&lt;/strong&gt; ，特别适合做理性强的工作，比如创作理论性文章，学习外语以及需要高度专注的工作。&lt;/p&gt;

&lt;p&gt;时间管理的基础就在于此。&lt;strong&gt;如果我们能在头脑技能最高的时间段做最适合的工作，可以将工作效率提高到原来的两倍甚至更高。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;虽说每个人都有同样的24小时，但是因为&lt;strong&gt;时间的价值不是均等的&lt;/strong&gt;，如果不能充分利用好大脑的黄金时间，每个人能达到的高度将完全不同。精英每年做好本职工作之余还有精力健身、旅游、出书，但普通人做好日常工作就已经耗尽全部的精力。&lt;/p&gt;

&lt;h3 id=&quot;时间的拼图理论&quot;&gt;时间的拼图理论&lt;/h3&gt;
&lt;p&gt;我们每天所做的日常工作大体上可以分为两种，&lt;strong&gt;一种是需要高度专注力的工作，另一种则不需要太强的专注力&lt;/strong&gt;, 在什么样的时间段用来做专注性的工作，会决定你一起一定的工作量和完成质量。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;与其追求自由控制专注力，反而不如在专注力高的时间段做需要高度专注力的工作&lt;/strong&gt;，换句话说就是在什么样的时间段给自己安排什么样的工作，而不是在意一天之中最疲惫的时候，非要强迫自己打起精神来学习，给自己充电，那其实很作用很有限，因为&lt;strong&gt;提高专注力也是有极限的&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;不如把我们每一天的工作想象成一个拼图游戏，我们只需要在自己专注力高的时候，把专注性的工作尽量的嵌入而在专注力低的时候就嵌入非专注性的工作在合适的时间安排合适的工作，工作便可以高效率高质量的完成，还可以节省出很多时间用于自己的兴趣爱好或者学习娱乐，这就是&lt;strong&gt;时间的拼图理论&lt;/strong&gt;。
&lt;img src=&quot;/img/books/manage-your-energy/focus_time_1.jpg&quot; alt=&quot;focus_time_1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;从一维时间管理术向二维时间管理术过渡&quot;&gt;从一维时间管理术向二维时间管理术过渡&lt;/h3&gt;

&lt;p&gt;通常我们认为时间是一维的时间，就像一条直线向一个方向不停的流，现有的很多时间管理，所有的思想也是基于这个一维的观点，我们可以把无意义的时间节约出来，把这无意义的时间去做有意义的事情，本质上是一维时间管理术的基本思想就是时间置换。从这个角度讲，我们的时间管理术永远无法突破一天只有24个小时的壁垒。&lt;/p&gt;

&lt;p&gt;但是如果我们统计工作质量。 或者我们更关注一天的有效的工作时间。专注力或者工作效率乘以时间等于工作量。如果我们能够想办法提高自己的专注力，就可以提高工作效率，在相同时间内就可以轻松将工作量提高两倍。或者三倍，这正是二维时间管理术的厉害之处。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们更应该关注时间x专注力的面积，而不是一味的将专注力提高。&lt;/strong&gt; 提高专注力是一件非常难的事情，如果把专注力从100提升到120确实很难，但是要想把因疲劳下降的专注力从70提升到90还是可以轻松办到的，为什么呢？因为我们只要在适当时机加入休息，放松的时间就可以让专注力得到恢复工作一段时间，休息一段时间，再工作一段时间再休息一下，把握好工作的节奏，在感到疲劳之前适当休息是非常重要的原则。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;如何有效提高专注力？&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;提高专注力的特效药是睡眠&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;完全重启专注力的秘诀是什么—运动&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;运动&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;有氧运动&lt;/strong&gt;对头脑非常好，在进行有氧运动的时候头脑会分泌一种叫&lt;strong&gt;BDNF脑源性神经营养因子&lt;/strong&gt;的物质，它对脑神经的生长发育和正常运转起着至关重要的作用，另外头脑还会分泌一种叫做多巴胺的神经递多巴胺能够提高人的性质，使人产生幸福质。
  * &lt;strong&gt;重要原则: 不管发生什么都不要压缩睡眠时间来提升工作效率。&lt;/strong&gt;
&lt;img src=&quot;/img/books/manage-your-energy/focus_time_2.jpg&quot; alt=&quot;focus_time_2&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;掌握美国式的工作效率&quot;&gt;掌握美国式的工作效率&lt;/h3&gt;
&lt;p&gt;当我们明白，我需要在专注力高的时候完成，需要有高专注力才能完成的工作的时候，现在&lt;strong&gt;下一步挑战的是以前需要在一个小时内完成的工作，看能否在50分钟内完成或者进一步缩短到45分钟&lt;/strong&gt;，这种想法反复下功夫就能更高效率，简单来说就是提高工作效率，缩短工作时间高速度，高质量的把工作完成&lt;/p&gt;

&lt;p&gt;要想提高工作效率，有意识的提高自己的专注力是基础，同时还要结合工作方法的创新，删减不必要的工作等一般的工作技巧。&lt;/p&gt;

&lt;h3 id=&quot;要花时间进行自我投资&quot;&gt;要花时间进行自我投资&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;那些让自己更忙碌的时间管理书可以废止了!&lt;/strong&gt;
&lt;strong&gt;那些把通过学习时间管理术创造出来的自由时间，又用来工作的人们，可能是最差劲的时间管理方法了。&lt;/strong&gt;
如果人们把时间管理术创造出来的自由时间又用来工作，继续增加自己的工作时间。那最后的结果就是人的一天的什么事情都不用做了，全部是用来工作，这样一来人哪还有时间来喘气呢，想想这样的生活是会让人感到压抑的。
&lt;strong&gt;时间管理术是应该把人从忙碌中解放出来的方法，把工作限定在一个相对固定的时间范围内，在规定的时间内尽量增加工作量，提高工作的质量，而不是一直工作。&lt;/strong&gt;
&lt;img src=&quot;/img/books/manage-your-energy/focus_time_3.jpg&quot; alt=&quot;focus_time_3&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;为了快乐而使用时间&quot;&gt;为了快乐而使用时间&lt;/h3&gt;
&lt;p&gt;美国人5:00下班之后做些什么呢？
对于美国人而言，5:00之前是工作时间，5:00之后应该是和家人共度的美好时光，所以晚饭一定要和家人聚在一起享用。
我们应该&lt;strong&gt;有工作之外的追求&lt;/strong&gt;，我们有亲人，有孩子需要陪伴；也可以追求自身的爱好。总而言之，工作只是人生的一部分，而不是全部。&lt;/p&gt;

&lt;h3 id=&quot;最大限度发挥大脑机能提高专注力的方法&quot;&gt;最大限度发挥大脑机能，提高专注力的方法&lt;/h3&gt;
&lt;h4 id=&quot;最强大脑之一-15-45-90法则&quot;&gt;最强大脑之一: 15 45 90法则&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;20分钟效应&lt;/strong&gt;
人高度专注的状态一般只能持续15分钟，不会超过20分钟，也就是说 &lt;strong&gt;15分钟可以看成一个专注力的单位时间。&lt;/strong&gt;
理解20分钟效应有助于我们提高工作效率，比如说作者在乘坐地铁的时候肯定会读书，每次只读10~15分钟，但这个时候读书的速度是其他时间段的5倍，因为在这个时间段里注意力更靠读书，可以达到入定状态，所以15分钟是注意力的一个时间单位在工作中那些用时不长又需要一气呵成完成的工作，就适合用15分钟来完成。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;45分钟:课堂上学生的专注力集中时间&lt;/strong&gt;
日本大学文理学院的熊朝雄教授曾说过，&lt;strong&gt;人的专注力持续的极限是40分钟&lt;/strong&gt;，他劝诫上班族说，如果你的工作主要是面对电脑处理施工文件，最好每隔40~50分钟就休息一下，无论是工作还是学习，我们最好以15分钟为基本的时间，单位每隔15分钟小休息一下，以三个15分钟为工作单元45分钟大休息一下，这样可以让我们的专注力持续更长的时间。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;90分钟足球比赛的专注力集中时间。
90分钟可以说是成年人专注力持续时间的极限，如果能以45分钟为一个小节，中间穿插短暂的休息，那么将更有利于专注力的持续。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;人体内有一个90分钟计时器
根据这些原则我们就可以根据具体的情况来选择合适的休息时间，但大体上可以保持15 45 90法则。
&lt;img src=&quot;/img/books/manage-your-energy/focus_time_4.jpg&quot; alt=&quot;focus_time_4&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;最强大脑之二-杂念排除法&quot;&gt;最强大脑之二: 杂念排除法&lt;/h4&gt;
&lt;p&gt;蔡戈尼克效应：
苏联心理学家蔡戈尼克在一家她经常光顾的咖啡馆中有一个重大发现，那家咖啡馆的服务员不用做记录，就能同时准确的记住好几位客人点的餐，可是当这位服务员把客人需要的餐点端上桌之后，他很快就把刚才那几位客人。点了什么都给忘记了。后来蔡戈尼克通过心理学实验对这个发现进行了验证，最后得出是结论当目标没有实现时，能对未完成的课题记忆比较深刻，但目标实现后能对已经完成的课题记忆就没有那么深刻了，人们将这种现象称作蔡戈尼克效应。&lt;/p&gt;

&lt;p&gt;大脑会一直跟踪未完成的目标，所以如果产生杂念，把这些杂念写在纸上把杂念写出来之后，原来未完成的课题就变成了已完成。头脑中的紧张状态就会解除，这个杂念也就随之消失了，一句话：&lt;strong&gt;头脑中产生杂念把它写下来写出来就忘了&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&quot;最强大脑之三-时间限制的工作术&quot;&gt;最强大脑之三： 时间限制的工作术&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;为什么学生的暑假作业一天就可以完成了？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;背水一战，狗急跳墙，兔子急了也咬人，这些俗语告诉我们，当人陷入紧急状况时，可以发挥出超常的能力。&lt;/p&gt;

&lt;p&gt;基于这个原理，有工作达人推荐秒表工作法就是为工作设定一个时间限制，工作效率就会大幅提升。
一旦工作中，加入了时间限制，就会有两个工作高峰，最初和最后。
&lt;img src=&quot;/img/books/manage-your-energy/focus_time_5.jpg&quot; alt=&quot;focus_time_5&quot; /&gt;
&lt;img src=&quot;/img/books/manage-your-energy/focus_time_6.jpg&quot; alt=&quot;focus_time_6&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;严守时间限制的工作方法
一件事如果要是说有空再作，那最后肯定是遥遥无期，但是如果把这件事情的时间定好，那一般都会在截止之前开始动手
&lt;strong&gt;严守时间限制的人会对时间限制产生紧张感，从而促进去甲肾上腺素的分泌，在去甲肾上腺素的帮助下，注意力高度集中，从而高效率高质量的按期完成任务&lt;/strong&gt;，但不守时的人对于时间限制已经不当做一回事，得不到去甲肾上腺素的帮助，所以工作总是磨磨蹭蹭，拖拖拉拉，质量还不高，就拿前面举的那位拖稿的作者来演，他拖延了一个月才交稿，其实也相当于浪费了自己一个月的时间。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;午后重启术&quot;&gt;午后重启术&lt;/h3&gt;
&lt;p&gt;午休是一个恢复专注力的绝佳机会，经过一个上午高强度工作到了中午的时候，人的专注力已经下降40~50%，但&lt;strong&gt;如果把午休时间利用好，下午完全可以将专注力恢复到90%左右&lt;/strong&gt;。午休时间没有利用好下午就可能会损失两个小时，结果就是下午下班时间干不完工作不得不加班。&lt;/p&gt;

&lt;h3 id=&quot;通过变换工作场所恢复专注力&quot;&gt;通过变换工作场所恢复专注力&lt;/h3&gt;

&lt;p&gt;提高记忆力的场所神经元，散步移动改变场所等对大脑都有很好的帮助，因为通过移动改变场所可以激发人脑内场所神经元的活性。一边走路一边学习，记忆更加深刻，这个现象已经得到了脑科学的验证。&lt;/p&gt;

&lt;p&gt;在有些公司的会议室会有各种不同的装修，主要是为了刺激人的场所神经元，使得人的大脑随之变得灵活，开会时就会有更多的好点子让开会的质量更高，而眼前的风景有所改变，就能对场所生意也形成刺激，所以当工作造成精神疲劳的时候可以换个地方工作如此简单的恢复方法一定不能错过。&lt;/p&gt;

&lt;h3 id=&quot;午睡&quot;&gt;午睡&lt;/h3&gt;
&lt;p&gt;仅仅30分钟的午睡，就可以让我的大脑和身体得到充分的恢复。&lt;strong&gt;午间小睡对于消除身体和大脑疲劳具有绝佳的效果&lt;/strong&gt;，还可以改善注意力，记忆力等机能
&lt;strong&gt;但最佳午睡时间为二十到三十分钟&lt;/strong&gt;
午睡超过一个小时人就会进入深度睡眠，醒来之后大脑也无法发挥正常机能，而午睡太久会影响到晚上的入睡，是造成失眠的原因之一。&lt;/p&gt;

&lt;h3 id=&quot;运动重启术&quot;&gt;运动重启术&lt;/h3&gt;
&lt;p&gt;如果举出一个最简单有效的恢复大脑活力的方法，会毫不犹豫的说运动只需10分钟的运动，就可以提高去甲肾上腺素血清素的脑内物质的浓度，可以让您在接下来的90分钟里一直充满能量，专注力与学习工作效率大幅提升。&lt;/p&gt;

&lt;p&gt;对于上班族而言，在公司大厦里爬几层楼梯或深蹲10次都能明显的感觉到大腿肌肉的紧张。&lt;strong&gt;只要是有意识的运动身体就可以有效的转化心情，提高专注力&lt;/strong&gt;。
&lt;strong&gt;一个人的早上的工作时间是黄金时间，但是到运动之后就是大脑的第2个黄金时间&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以作者为例，在体育馆傍晚的时候会去体育馆做运动，冲过澡之后立刻就会投入写作，虽然已经是晚上，但是写作状态和早上并没有什么区别，早上两个小时能写满10个月的高枝儿，办完之后两个小时也能写出10页，而且质量也很高，这样一天的工作时间是翻倍了，对于上班族而言，最佳的创造创造工作时间就莫过于下午运动重启术。&lt;/p&gt;

&lt;p&gt;下午进行适度的有氧运动可以让专注力恢复到100%，也就是创造出大脑的第2个黄金时间。
&lt;img src=&quot;/img/books/manage-your-energy/focus_time_9.jpg&quot; alt=&quot;focus_time_9&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;运动越多创造出来的时间就越多&quot;&gt;运动越多，创造出来的时间就越多&lt;/h3&gt;
&lt;p&gt;坚持运动一段时间你就会发现每周能确保运动一次之后，就能确保每周运动两次，每周运动两次之后就能再多一次运动三次运动之后人的体力和大脑机能都会提升，工作效率比以前显著提高，这样就可以让工作在更短的时间内完成创造出更多的工作时间，运动也能让我们的睡眠质量更高，白天的疲劳得到彻底的恢复，第2天到了又能以100%的状态投入工作
坚持运动还能让大脑内的神经元，网络越来越细密，结构越来越合理，换句话说就是头脑运转得越来越快，同样的工作只需要更短的时间，质量而且越高，&lt;strong&gt;根据作者的经验坚持运动之后和不运动的时候相比一个月的工作总量几乎是以前的两倍，而且可支配的自由支配的时间大幅增加，所以越是声称自己没有时间的人越应该运动起来，运动会帮您创造出更多的是时间&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;为什么加班是不可取的&quot;&gt;为什么加班是不可取的&lt;/h3&gt;
&lt;p&gt;从下面这张图表可以看出，如果每天都没有得到充分的休息专注力，无法回复，那么总体来说一周的工作效率是非常低的，成果比正常休息的要少。
&lt;img src=&quot;/img/books/manage-your-energy/focus_time_10.jpg&quot; alt=&quot;focus_time_10&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;把自由时间利用到极致的自我投资自我更新&quot;&gt;把自由时间利用到极致的自我投资自我更新&lt;/h3&gt;
&lt;p&gt;最好的自由时间之一，自由时间不要用于工作。
我的理解其实是在自由时间，并不一定要完全是在做工作，而是要扩展自己的认知范围探求自己能做好的事情。
作者的本职工作是一个外科医生，但是后期成为一名作家平均每年能出三本书，这种情况下它的效率比过去提高。&lt;/p&gt;

&lt;p&gt;把时间投资自己的专长。&lt;/p&gt;
</description>
        <pubDate>Sun, 31 Mar 2019 00:00:00 +0800</pubDate>
        <link>/2019/03/31/manage-your-energy/</link>
        <guid isPermaLink="true">/2019/03/31/manage-your-energy/</guid>
        
        <category>读书笔记</category>
        
        
      </item>
    
  </channel>
</rss>
